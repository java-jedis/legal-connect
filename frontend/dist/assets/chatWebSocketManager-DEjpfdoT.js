import{a5 as r}from"./index-rvQoOiZL.js";class d{constructor(){this.isInitialized=!1,this.chatSubscriptions=new Map,this.messageHandlers=new Map,this.isConnected=!1,this.userId=null,this.onMessageReceived=null,this.onReadStatusUpdate=null,this.onUnreadCountUpdate=null,this.onConnectionChange=null,this.onError=null}async initialize(e={}){if(this.isInitialized)return console.warn("Chat WebSocket manager is already initialized"),!0;try{return this.onMessageReceived=e.onMessageReceived||null,this.onReadStatusUpdate=e.onReadStatusUpdate||null,this.onUnreadCountUpdate=e.onUnreadCountUpdate||null,this.onConnectionChange=e.onConnectionChange||null,this.onError=e.onError||null,r.setEventCallbacks({onConnect:()=>{this.isConnected=!0,this._setupChatSubscriptions(),this.onConnectionChange&&this.onConnectionChange(!0)},onDisconnect:()=>{this.isConnected=!1,this._clearChatSubscriptions(),this.onConnectionChange&&this.onConnectionChange(!1)},onError:t=>{console.error("Chat WebSocket error:",t),this.onError&&this.onError(t)},onReconnect:()=>{this.isConnected=!0,this._setupChatSubscriptions(),this.onConnectionChange&&this.onConnectionChange(!0)}}),this.isInitialized=!0,console.log("Chat WebSocket manager initialized successfully"),!0}catch(t){return console.error("Failed to initialize chat WebSocket manager:",t),this.onError&&this.onError(t),!1}}async connect(e,t,n=null){if(!this.isInitialized)throw new Error("Chat WebSocket manager must be initialized before connecting");if(!e||!t)throw new Error("Valid authentication token and user ID are required for chat WebSocket connection");try{const o=JSON.parse(atob(e.split(".")[1])),s=Math.floor(Date.now()/1e3);if(o.exp&&o.exp<s)throw new Error("Authentication token has expired")}catch(o){throw console.error("Invalid authentication token for chat WebSocket:",o),new Error("Invalid authentication token")}try{return this.userId=t,await r.connect(e,t,n),r.getConnectionStatus().isConnected&&this._setupChatSubscriptions(),!0}catch(o){return console.error("Failed to connect chat WebSocket:",o),this.onError&&this.onError(o),!1}}async disconnect(){try{return this._clearChatSubscriptions(),await r.disconnect(),this.isConnected=!1,this.userId=null,!0}catch(e){return console.error("Failed to disconnect chat WebSocket:",e),this.onError&&this.onError(e),!1}}sendMessage(e){if(!this.isConnected)throw new Error("WebSocket is not connected");if(!this.userId)throw new Error("User not authenticated for WebSocket operations");if(!e||!e.receiverId||!e.content)throw new Error("Invalid message data: receiverId and content are required");if(e.receiverId===this.userId)throw new Error("Cannot send message to yourself");try{return r.send("/app/chat/send",e),console.log("Message sent via WebSocket:",e),!0}catch(t){return console.error("Failed to send message via WebSocket:",t),this.onError&&this.onError(t),!1}}markMessageAsRead(e){if(!this.isConnected)throw new Error("WebSocket is not connected");if(!this.userId)throw new Error("User not authenticated for WebSocket operations");if(!e)throw new Error("Message ID is required");try{return r.client.publish({destination:"/app/chat/mark-read",body:e.toString()}),console.log("Mark-as-read sent via WebSocket for message:",e),!0}catch(t){return console.error("Failed to send mark-as-read via WebSocket:",t),this.onError&&this.onError(t),!1}}markConversationAsRead(e){if(!this.isConnected)throw new Error("WebSocket is not connected");if(!this.userId)throw new Error("User not authenticated for WebSocket operations");if(!e)throw new Error("Conversation ID is required");try{return r.send("/app/chat/mark-conversation-read",e),console.log("Mark-conversation-as-read sent via WebSocket for conversation:",e),!0}catch(t){return console.error("Failed to send mark-conversation-as-read via WebSocket:",t),this.onError&&this.onError(t),!1}}subscribeToChat(){if(!this.isConnected)throw new Error("WebSocket is not connected");if(!this.userId)throw new Error("User not authenticated for WebSocket operations");try{return r.send("/app/chat/subscribe"),console.log("Chat subscription message sent"),!0}catch(e){return console.error("Failed to send chat subscription:",e),this.onError&&this.onError(e),!1}}pingChat(){if(!this.isConnected)throw new Error("WebSocket is not connected");if(!this.userId)throw new Error("User not authenticated for WebSocket operations");try{return r.send("/app/chat/ping"),console.log("Chat ping sent"),!0}catch(e){return console.error("Failed to send chat ping:",e),this.onError&&this.onError(e),!1}}getConnectionStatus(){return{...r.getConnectionStatus(),chatInitialized:this.isInitialized,chatConnected:this.isConnected,userId:this.userId,activeSubscriptions:this.chatSubscriptions.size}}async manualReconnect(){try{const e=await r.manualReconnect();return e&&r.getConnectionStatus().isConnected&&this._setupChatSubscriptions(),e}catch(e){return console.error("Chat WebSocket manual reconnection failed:",e),this.onError&&this.onError(e),!1}}_setupChatSubscriptions(){if(!this.userId||!r.getConnectionStatus().isConnected){console.warn("Cannot setup chat subscriptions: missing userId or not connected");return}try{this._clearChatSubscriptions();const e=`/topic/chat-${this.userId}`,t=r.subscribe(e,i=>{this._handleIncomingMessage(i)});this.chatSubscriptions.set("messages",t);const n=`/topic/chat-unread-${this.userId}`,o=r.subscribe(n,i=>{this._handleUnreadCountUpdate(i)});this.chatSubscriptions.set("unread",o);const s=`/topic/chat-read-status-${this.userId}`,a=r.subscribe(s,i=>{this._handleReadStatusUpdate(i)});this.chatSubscriptions.set("readStatus",a);const c=r.subscribe("/user/queue/chat-status",i=>{this._handleChatStatusMessage(i)});this.chatSubscriptions.set("chatStatus",c);const h=r.subscribe("/user/queue/chat-errors",i=>{this._handleChatError(i)});this.chatSubscriptions.set("chatErrors",h),this.subscribeToChat(),console.log("Chat WebSocket subscriptions established for user:",this.userId)}catch(e){console.error("Failed to setup chat subscriptions:",e),this.onError&&this.onError(e)}}_clearChatSubscriptions(){this.chatSubscriptions.forEach((e,t)=>{try{r.unsubscribe(e),console.log(`Unsubscribed from chat ${t} subscription`)}catch(n){console.error(`Failed to unsubscribe from chat ${t}:`,n)}}),this.chatSubscriptions.clear()}_handleIncomingMessage(e){try{if(console.log("Received chat message via WebSocket:",e),!e||!e.id||!e.conversationId){console.warn("Invalid message structure received:",e);return}if((!e.createdAt||new Date(e.createdAt).getTime()===0)&&(console.warn(`WebSocket message ${e.id} has invalid timestamp, using current time`),e.createdAt=new Date().toISOString()),typeof window<"u"){const t=new CustomEvent("websocket-message",{detail:e});window.dispatchEvent(t)}this.onMessageReceived&&this.onMessageReceived(e)}catch(t){console.error("Error handling incoming chat message:",t),this.onError&&this.onError(t)}}_handleUnreadCountUpdate(e){try{if(console.log("Received unread count update via WebSocket:",e),!e||typeof e.totalUnreadCount!="number"){console.warn("Invalid unread count data received:",e);return}if(typeof window<"u"){const t=new CustomEvent("websocket-unread-count-update",{detail:e});window.dispatchEvent(t)}this.onUnreadCountUpdate&&this.onUnreadCountUpdate(e)}catch(t){console.error("Error handling unread count update:",t),this.onError&&this.onError(t)}}_handleReadStatusUpdate(e){try{if(console.log("Received read status update via WebSocket:",e),!e||!e.messageId){console.warn("Invalid read status data received:",e);return}if(typeof window<"u"){const t=new CustomEvent("websocket-read-status-update",{detail:{messageId:e.messageId,isRead:e.isRead||e.read||!0,conversationId:e.conversationId,timestamp:Date.now()}});window.dispatchEvent(t)}this.onReadStatusUpdate&&this.onReadStatusUpdate({messageId:e.messageId,isRead:e.isRead||e.read||!0,conversationId:e.conversationId})}catch(t){console.error("Error handling read status update:",t),this.onError&&this.onError(t)}}_handleChatStatusMessage(e){try{if(console.log("Received chat status message:",e),typeof e=="string"&&e.includes("mark-read request received")){const t=e.split("mark-read request received for: ")[1];if(t&&typeof window<"u"){const n=new CustomEvent("websocket-mark-read-success",{detail:{messageId:t.trim()}});window.dispatchEvent(n)}}if(typeof e=="string"&&e.includes("mark-conversation-read request received")){const t=e.split("mark-conversation-read request received for: ")[1];if(t&&typeof window<"u"){const n=new CustomEvent("websocket-conversation-read",{detail:{conversationId:t.trim()}});window.dispatchEvent(n)}}}catch(t){console.error("Error handling chat status message:",t),this.onError&&this.onError(t)}}_handleChatError(e){try{console.error("Received chat error via WebSocket:",e);const t=new Error(e||"Chat WebSocket error occurred");if(typeof window<"u"){const n=new CustomEvent("websocket-chat-error",{detail:{error:t.message}});window.dispatchEvent(n)}this.onError&&this.onError(t)}catch(t){console.error("Error handling chat error message:",t)}}cleanup(){this._clearChatSubscriptions(),this.isInitialized=!1,this.isConnected=!1,this.userId=null,this.onMessageReceived=null,this.onReadStatusUpdate=null,this.onUnreadCountUpdate=null,this.onConnectionChange=null,this.onError=null}}const b=new d;export{b as default};
